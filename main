local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local RS = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Root = Character:WaitForChild("HumanoidRootPart")

local Packets = require(RS.Modules.Packets)
local GameUtil = require(RS.Modules.GameUtil)
local ItemIDS = require(RS.Modules.ItemIDS)
local ItemData = require(RS.Modules.ItemData)

local success, config = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/Zacharificy/goldfarm/main/tweens"))()
end)

local DEFAULT_CONFIG = success and config or {waitTime = 1, heightOffset = 0, moveSpeed = 20, positions = {}}
if success then
    print("✅ Tween config loaded! (" .. #config.positions .. " positions)")
else
    warn("❌ Config load failed")
end

local state = {
    autoHit = false,
    noclip = false,
    autoEat = false,
    tween = false,
    pickupGold = false,
    pickupCoal = false
}

local settings = {
    hitRadius = 100,
    fruit = "Lemon",
    tweenSpeed = 20,
    waitTime = DEFAULT_CONFIG.waitTime or 0.1,
    positions = DEFAULT_CONFIG.positions or {}
}

local connections = {}
local tasks = {}
local HUNGER_CAP = 100
local EAT_AT_OR_BELOW = 90
local LOOP_WAIT_SECONDS = 1
local POST_EAT_COOLDOWN = 2.0
local lastEatTime = 0

local fruitOptions = {}
for name, data in pairs(ItemData) do
    if data.grows then
        table.insert(fruitOptions, name)
    end
end
table.sort(fruitOptions)
if #fruitOptions == 0 then
    fruitOptions = {"Bloodfruit", "Strawberry", "Berries", "Cloudberry", "Prickly Pear", "Lemon"}
end

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = char:WaitForChild("Humanoid")
    Root = char:WaitForChild("HumanoidRootPart")
end)

local function hitResources()
    if not state.autoHit then return end
    local entities = {}
    for _, res in ipairs(Workspace.Resources:GetChildren()) do
        if (Root.Position - res:GetPivot().Position).Magnitude <= settings.hitRadius then
            local id = res:GetAttribute("EntityID")
            if id then table.insert(entities, id) end
        end
    end
    if #entities > 0 then
        Packets.SwingTool.send(entities)
    end
end

local function noclip()
    -- Handle doors
    for _, v in workspace.Deployables:GetChildren() do
        local door = v:FindFirstChild("Door")
        if door then
            door.Transparency = state.noclip and 0.5 or 0
            door.CanCollide = not state.noclip
        end
    end
    
    -- Handle Old Boards - only when NOT tweening to prevent conflicts
    if state.noclip and not state.tween then
        for _, v in workspace.Resources:GetChildren() do
            if v.Name == "Old Boards" then
                v:Destroy()
            end
        end
    end
    
    -- Make character parts non-collidable during noclip
    if state.noclip and Character then
        for _, part in ipairs(Character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = false
            end
        end
    end
end

local function findFruit(name)
    for idx, data in next, GameUtil.getData().inventory do
        if data.name == name then return idx end
    end
end

local function getRestore(name)
    local id = ItemIDS[name] or name
    local data = ItemData[id] or (ItemIDS[id] and ItemData[ItemIDS[id]])
    return data and (data.food or data.hunger or data.restore or data.restoreValue or data.heal)
end

local function getHunger()
    local stats = GameUtil and GameUtil.Data and GameUtil.Data.stats
    return stats and stats.food
end

local function canEatNow()
    return (tick() - lastEatTime) >= POST_EAT_COOLDOWN
end

local function eatFruitOnce(idx)
    Packets.UseBagItem.send(idx)
    lastEatTime = tick()
end

local function willOvereat(currentHunger, restore)
    if not restore then return false end
    return (currentHunger + restore) > HUNGER_CAP
end

local function autoEat()
    while state.autoEat do
        local hunger = getHunger()
        local health = Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health or 100
        
        if not settings.fruit then
            warn("No fruit selected for auto-eat.")
        elseif not hunger then
            warn("Hunger value unavailable right now.")
        else
            if (hunger <= EAT_AT_OR_BELOW or health <= 90) and canEatNow() then
                local idx = findFruit(settings.fruit)
                if idx then
                    local restore = getRestore(settings.fruit)
                    
                    if restore and willOvereat(hunger, restore) and health > 90 then
                    else
                        eatFruitOnce(idx)
                    end
                else
                    warn("Selected fruit not found in inventory: " .. tostring(settings.fruit))
                end
            end
        end
        
        task.wait(LOOP_WAIT_SECONDS)
    end
end

local function pickup(itemName)
    local enabled = itemName == "Raw Gold" and state.pickupGold or state.pickupCoal
    while enabled do
        enabled = itemName == "Raw Gold" and state.pickupGold or state.pickupCoal
        local items = Workspace:FindFirstChild("Items")
        if items then
            for _, item in ipairs(items:GetChildren()) do
                if item.Name == itemName then
                    local id = item:GetAttribute("EntityID")
                    local t = os.clock()
                    while not id and item.Parent == items and os.clock() - t < 1.5 do
                        task.wait()
                        id = item:GetAttribute("EntityID")
                    end
                    if id then
                        for i = 1, 12 do
                            if not item or item.Parent ~= items then break end
                            Packets.Pickup.send(id)
                            task.wait(0.03)
                        end
                    end
                end
            end
        end
        task.wait(0.05)
    end
end

local function tweenPath()
    if #settings.positions == 0 then
        warn("No positions loaded!")
        state.tween = false
        return
    end
    
    local function nearestIndex(fromPos)
        local bestI, bestD = 1, math.huge
        for j = 1, #settings.positions do
            local p = settings.positions[j]
            if p and p.X and p.Y and p.Z then
                local d = (fromPos - Vector3.new(p.X, p.Y, p.Z)).Magnitude
                if d < bestD then bestI, bestD = j, d end
            end
        end
        return bestI
    end
    
    local idx = nearestIndex(Root.Position)
    
    while state.tween do
        if not Root or not Root.Parent then
            task.wait(1)
            continue
        end
        
        local pos = settings.positions[idx]
        if not pos then
            idx = 1
            continue
        end
        
        local target = Vector3.new(pos.X, pos.Y, pos.Z)
        local dist = (Root.Position - target).Magnitude
        local speed = 19
        local duration = dist / speed
        
        if connections.tween then
            connections.tween:Cancel()
        end
        
        Root.Anchored = true
        Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        
        local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        connections.tween = TweenService:Create(Root, info, {CFrame = CFrame.new(target)})
        
        local completed = false
        local rubberbanded = false
        local startPos = Root.Position
        local lastPos = startPos
        
        local conn
        conn = connections.tween.Completed:Connect(function()
            completed = true
            if conn then conn:Disconnect() end
        end)
        
        connections.tween:Play()
        
        -- Detect rubberband by checking for sudden position changes
        while state.tween and not completed do
            task.wait(0.1)
            
            if not Root or not Root.Parent then break end
            
            local curPos = Root.Position
            local moveDist = (curPos - lastPos).Magnitude
            
            -- If we suddenly moved back more than 10 studs, we rubberbanded
            if moveDist > 10 then
                local dirToTarget = (target - lastPos).Unit
                local dirMoved = (curPos - lastPos).Unit
                local dotProduct = dirToTarget:Dot(dirMoved)
                
                -- If we moved opposite to target direction, it's a rubberband
                if dotProduct < 0 then
                    rubberbanded = true
                    warn("Rubberband detected! Recalculating path...")
                    break
                end
            end
            
            lastPos = curPos
        end
        
        if conn then conn:Disconnect() end
        if connections.tween then connections.tween:Cancel() end
        
        -- If rubberbanded, find nearest position and continue smoothly
        if rubberbanded then
            Root.Anchored = false
            task.wait(0.5)
            idx = nearestIndex(Root.Position)
            task.wait(0.3)
            continue
        end
        
        idx = idx % #settings.positions + 1
        task.wait(0.01)
    end
    
    Root.Anchored = false
end

local gui = Instance.new("ScreenGui")
gui.Name = "TweenHub"
gui.ResetOnSpawn = false
gui.Parent = game.CoreGui

local main = Instance.new("Frame")
main.Size = UDim2.new(0, 400, 0, 500)
main.Position = UDim2.new(0.5, -200, 0.5, -250)
main.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
main.BorderSizePixel = 0
main.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = main

local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, 50)
header.BackgroundColor3 = Color3.fromRGB(218, 165, 32)
header.BorderSizePixel = 0
header.Parent = main

local hCorner = Instance.new("UICorner")
hCorner.CornerRadius = UDim.new(0, 12)
hCorner.Parent = header

local hFix = Instance.new("Frame")
hFix.Size = UDim2.new(1, 0, 0, 12)
hFix.Position = UDim2.new(0, 0, 1, -12)
hFix.BackgroundColor3 = Color3.fromRGB(218, 165, 32)
hFix.BorderSizePixel = 0
hFix.Parent = header

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -20, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Tween"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 24
title.Font = Enum.Font.GothamBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = header

local close = Instance.new("TextButton")
close.Size = UDim2.new(0, 30, 0, 30)
close.Position = UDim2.new(1, -40, 0, 10)
close.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
close.Text = "X"
close.TextColor3 = Color3.fromRGB(255, 255, 255)
close.TextSize = 18
close.Font = Enum.Font.GothamBold
close.Parent = header

local cCorner = Instance.new("UICorner")
cCorner.CornerRadius = UDim.new(0, 6)
cCorner.Parent = close

close.MouseButton1Click:Connect(function()
    gui:Destroy()
end)

local scroll = Instance.new("ScrollingFrame")
scroll.Size = UDim2.new(1, -20, 1, -70)
scroll.Position = UDim2.new(0, 10, 0, 60)
scroll.BackgroundTransparency = 1
scroll.BorderSizePixel = 0
scroll.ScrollBarThickness = 6
scroll.Parent = main

local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 10)
layout.Parent = scroll

local function toggle(name, icon, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 60)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = scroll
    
    local fCorner = Instance.new("UICorner")
    fCorner.CornerRadius = UDim.new(0, 8)
    fCorner.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = icon .. " " .. name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 50, 0, 25)
    btn.Position = UDim2.new(1, -60, 0.5, -12.5)
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    btn.Text = "OFF"
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextSize = 14
    btn.Font = Enum.Font.GothamBold
    btn.Parent = frame
    
    local bCorner = Instance.new("UICorner")
    bCorner.CornerRadius = UDim.new(0, 6)
    bCorner.Parent = btn
    
    local on = false
    btn.MouseButton1Click:Connect(function()
        on = not on
        btn.Text = on and "ON" or "OFF"
        btn.BackgroundColor3 = on and Color3.fromRGB(218, 165, 32) or Color3.fromRGB(60, 60, 60)
        callback(on)
    end)
end

local function slider(name, min, max, def, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 80)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = scroll
    
    local fCorner = Instance.new("UICorner")
    fCorner.CornerRadius = UDim.new(0, 8)
    fCorner.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 25)
    label.Position = UDim2.new(0, 10, 0, 5)
    label.BackgroundTransparency = 1
    label.Text = name .. ": " .. def
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(1, -20, 0, 8)
    bar.Position = UDim2.new(0, 10, 0, 40)
    bar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    bar.BorderSizePixel = 0
    bar.Parent = frame
    
    local bCorner = Instance.new("UICorner")
    bCorner.CornerRadius = UDim.new(1, 0)
    bCorner.Parent = bar
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((def - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(218, 165, 32)
    fill.BorderSizePixel = 0
    fill.Parent = bar
    
    local fCorner2 = Instance.new("UICorner")
    fCorner2.CornerRadius = UDim.new(1, 0)
    fCorner2.Parent = fill
    
    local drag = Instance.new("TextButton")
    drag.Size = UDim2.new(0, 20, 0, 20)
    drag.Position = UDim2.new((def - min) / (max - min), -10, 0.5, -10)
    drag.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    drag.Text = ""
    drag.Parent = bar
    
    local dCorner = Instance.new("UICorner")
    dCorner.CornerRadius = UDim.new(1, 0)
    dCorner.Parent = drag
    
    local dragging = false
    local val = def
    
    drag.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if dragging then
            local mouse = LocalPlayer:GetMouse()
            local x = math.clamp(mouse.X - bar.AbsolutePosition.X, 0, bar.AbsoluteSize.X)
            local pct = x / bar.AbsoluteSize.X
            val = math.floor(min + (max - min) * pct)
            
            fill.Size = UDim2.new(pct, 0, 1, 0)
            drag.Position = UDim2.new(pct, -10, 0.5, -10)
            label.Text = name .. ": " .. val
            
            callback(val)
        end
    end)
end

local function dropdown(name, opts, def, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 60)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = scroll
    
    local fCorner = Instance.new("UICorner")
    fCorner.CornerRadius = UDim.new(0, 8)
    fCorner.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 20)
    label.Position = UDim2.new(0, 10, 0, 5)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -20, 0, 25)
    btn.Position = UDim2.new(0, 10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.Text = def
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextSize = 14
    btn.Font = Enum.Font.Gotham
    btn.Parent = frame
    
    local bCorner = Instance.new("UICorner")
    bCorner.CornerRadius = UDim.new(0, 6)
    bCorner.Parent = btn
    
    local list = Instance.new("ScrollingFrame")
    list.Size = UDim2.new(1, -20, 0, 0)
    list.Position = UDim2.new(0, 10, 0, 60)
    list.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    list.BorderSizePixel = 0
    list.Visible = false
    list.ZIndex = 10
    list.ScrollBarThickness = 4
    list.CanvasSize = UDim2.new(0, 0, 0, #opts * 30)
    list.Parent = frame
    
    local lCorner = Instance.new("UICorner")
    lCorner.CornerRadius = UDim.new(0, 6)
    lCorner.Parent = list
    
    local lLayout = Instance.new("UIListLayout")
    lLayout.Padding = UDim.new(0, 2)
    lLayout.Parent = list
    
    btn.MouseButton1Click:Connect(function()
        list.Visible = not list.Visible
        if list.Visible then
            local h = math.min(#opts * 30, 150)
            frame.Size = UDim2.new(1, 0, 0, 60 + h)
            list.Size = UDim2.new(1, -20, 0, h)
        else
            frame.Size = UDim2.new(1, 0, 0, 60)
        end
    end)
    
    for _, opt in ipairs(opts) do
        local obtn = Instance.new("TextButton")
        obtn.Size = UDim2.new(1, 0, 0, 28)
        obtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        obtn.Text = opt
        obtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        obtn.TextSize = 14
        obtn.Font = Enum.Font.Gotham
        obtn.BorderSizePixel = 0
        obtn.Parent = list
        
        obtn.MouseEnter:Connect(function()
            obtn.BackgroundColor3 = Color3.fromRGB(218, 165, 32)
        end)
        
        obtn.MouseLeave:Connect(function()
            obtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        end)
        
        obtn.MouseButton1Click:Connect(function()
            btn.Text = opt
            list.Visible = false
            frame.Size = UDim2.new(1, 0, 0, 60)
            callback(opt)
        end)
    end
end

toggle("Auto Hit Resources", "🔨", function(on)
    state.autoHit = on
    if on then
        connections.autoHit = RunService.Heartbeat:Connect(hitResources)
    else
        if connections.autoHit then
            connections.autoHit:Disconnect()
        end
    end
end)

slider("Hit Radius", 10, 200, settings.hitRadius, function(v)
    settings.hitRadius = v
end)

toggle("Noclip (Doors & Boards)", "👻", function(on)
    state.noclip = on
    noclip()
    if on then
        connections.noclip = RunService.Heartbeat:Connect(noclip)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
        end
        noclip()
    end
end)

dropdown("Select Fruit", fruitOptions, settings.fruit, function(fruit)
    settings.fruit = fruit
end)

toggle("Auto Eat/Heal", "🍎", function(on)
    state.autoEat = on
    if on then
        tasks.autoEat = task.spawn(autoEat)
    else
        if tasks.autoEat then
            task.cancel(tasks.autoEat)
        end
    end
end)

toggle("Position Tween", "🧭", function(on)
    state.tween = on
    if on then
        task.spawn(tweenPath)
    else
        if connections.tween then
            connections.tween:Cancel()
        end
    end
end)

local speedDropdown = dropdown("Tween Speed", {"19", "20"}, "20", function(speed)
    settings.tweenSpeed = tonumber(speed) or 20
end)

slider("Wait Time (seconds)", 0, 10, settings.waitTime, function(v)
    settings.waitTime = v
end)

toggle("Pickup Raw Gold", "💰", function(on)
    state.pickupGold = on
    if on then
        tasks.pickupGold = task.spawn(function() pickup("Raw Gold") end)
    else
        if tasks.pickupGold then
            task.cancel(tasks.pickupGold)
        end
    end
end)

toggle("Pickup Coal", "⚫", function(on)
    state.pickupCoal = on
    if on then
        tasks.pickupCoal = task.spawn(function() pickup("Coal") end)
    else
        if tasks.pickupCoal then
            task.cancel(tasks.pickupCoal)
        end
    end
end)

local info = Instance.new("Frame")
info.Size = UDim2.new(1, 0, 0, 60)
info.BackgroundColor3 = Color3.fromRGB(218, 165, 32)
info.BackgroundTransparency = 0.8
info.BorderSizePixel = 0
info.Parent = scroll

local iCorner = Instance.new("UICorner")
iCorner.CornerRadius = UDim.new(0, 8)
iCorner.Parent = info

local iLabel = Instance.new("TextLabel")
iLabel.Size = UDim2.new(1, -20, 1, -20)
iLabel.Position = UDim2.new(0, 10, 0, 10)
iLabel.BackgroundTransparency = 1
iLabel.Text = "ℹ️ Loaded " .. #settings.positions .. " positions"
iLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
iLabel.TextSize = 12
iLabel.Font = Enum.Font.Gotham
iLabel.TextWrapped = true
iLabel.Parent = info

local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = main.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

header.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

print("Tween Hub loaded!")
