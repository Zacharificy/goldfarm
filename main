-- Load UI Library (Async)
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library, ThemeManager, SaveManager

task.spawn(function()
    Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
    ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
    SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
end)

-- Services (Cached)
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")

-- Player
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Root = Character:WaitForChild("HumanoidRootPart")

-- Game Modules (cached)
local Packets = require(RS.Modules.Packets)
local GameUtil = require(RS.Modules.GameUtil)
local ItemIDS = require(RS.Modules.ItemIDS)
local ItemData = require(RS.Modules.ItemData)

Player.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = char:WaitForChild("Humanoid")
    Root = char:WaitForChild("HumanoidRootPart")
end)

-- Load config (Async)
local config = {waitTime = 0.01, positions = {}}
task.spawn(function()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/Zacharificy/goldfarm/main/tweens"))()
    end)
    if success and result then
        config = result
    end
end)

-- State
local S = {
    autoHit = false,
    noclip = false,
    autoEat = false,
    tween = false,
    pickupGold = false,
    pickupCoal = false,
    pickupCoins = false,
    antiAFK = false,
    coinPress = false,
    campfireFuel = false,
    tpRawGoldToChest = false,
    pickupGoldFromChest = false,
    blackScreen = false,
    fruit = "Lemon",
    hitRadius = 200,
    waitTime = 0.01,
    walkSpeed = 20,
    positions = {},
    tweenSpeed = 20,
    currentTargetIndex = 1,
    isMoving = false,
    lastEatTime = 0,
    chest = nil
}

-- Constants
local HUNGER_CAP = 100
local EAT_AT_OR_BELOW = 90
local POST_EAT_COOLDOWN = 1.5

-- Cached tables
local Connections = {}
local Tasks = {}
local CachedItems = {
    Items = Workspace:FindFirstChild("Items"),
    Resources = Workspace:FindFirstChild("Resources"),
    Deployables = Workspace:FindFirstChild("Deployables")
}

-- Fruit options (cached, built async)
local fruitOptions = {}
task.spawn(function()
    for name, data in pairs(ItemData) do
        if data.grows then
            table.insert(fruitOptions, name)
        end
    end
    table.sort(fruitOptions)
end)

-- Optimized Anti-AFK
local function setupAntiAFK()
    local GC = getconnections or get_signal_cons
    if GC then
        for _, v in pairs(GC(Player.Idled)) do
            if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
        end
    else
        local VirtualUser = game:GetService("VirtualUser")
        Player.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
end

-- Optimized Auto Hit
local hitDebounce = false
local function hitResources()
    if hitDebounce or not Root.Parent then return end
    hitDebounce = true
    
    local entities = {}
    local rootPos = Root.Position
    local hitRadiusSq = S.hitRadius * S.hitRadius
    
    if CachedItems.Resources then
        for _, res in ipairs(CachedItems.Resources:GetChildren()) do
            if res.Parent then
                local ok, pivot = pcall(res.GetPivot, res)
                if ok then
                    local distSq = (rootPos - pivot.Position).Magnitude
                    if distSq * distSq <= hitRadiusSq then
                        local id = res:GetAttribute("EntityID")
                        if id then entities[#entities + 1] = id end
                    end
                end
            end
        end
    end
    
    if #entities > 0 then
        pcall(Packets.SwingTool.send, entities)
    end
    
    task.delay(0.06, function() hitDebounce = false end)
end

-- Optimized Noclip
local function noclip()
    if CachedItems.Deployables then
        for _, v in ipairs(CachedItems.Deployables:GetChildren()) do
            local door = v:FindFirstChild("Door")
            if door then
                door.Transparency = S.noclip and 0.5 or 0
                door.CanCollide = not S.noclip
            end
        end
    end
    
    if S.noclip and Character then
        for _, part in ipairs(Character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = false
            end
        end
    end
end

-- Optimized Auto Eat
local function findFruit(name)
    for idx, data in next, GameUtil.getData().inventory do
        if data.name == name then return idx end
    end
end

local function getHunger()
    local stats = GameUtil and GameUtil.Data and GameUtil.Data.stats
    return stats and stats.food
end

local function autoEat()
    while S.autoEat do
        local hunger = getHunger()
        if S.fruit and hunger and hunger <= EAT_AT_OR_BELOW and (tick() - S.lastEatTime) >= POST_EAT_COOLDOWN then
            local idx = findFruit(S.fruit)
            if idx then
                Packets.UseBagItem.send(idx)
                S.lastEatTime = tick()
            end
        end
        task.wait(0.8)
    end
end

-- Ultra-Fast Instant Pickup
local function createInstantPickup(itemName, checkChests, stateKey)
    return function()
        local pickupCache = {}
        while S[stateKey] do
            if CachedItems.Items then
                for _, item in ipairs(CachedItems.Items:GetChildren()) do
                    if item.Name == itemName and not pickupCache[item] then
                        local id = item:GetAttribute("EntityID")
                        if id then
                            pickupCache[item] = true
                            Packets.Pickup.send(id)
                            Packets.Pickup.send(id)
                            Packets.Pickup.send(id)
                            task.delay(0.5, function() pickupCache[item] = nil end)
                        end
                    end
                end
            end
            
            if checkChests and CachedItems.Deployables then
                for _, chest in ipairs(CachedItems.Deployables:GetChildren()) do
                    local contents = chest:FindFirstChild("Contents")
                    if contents then
                        for _, item in ipairs(contents:GetChildren()) do
                            if item.Name == itemName and not pickupCache[item] then
                                local id = item:GetAttribute("EntityID")
                                if id then
                                    pickupCache[item] = true
                                    Packets.Pickup.send(id)
                                    Packets.Pickup.send(id)
                                    Packets.Pickup.send(id)
                                    task.delay(0.5, function() pickupCache[item] = nil end)
                                end
                            end
                        end
                    end
                end
            end
            RunService.Heartbeat:Wait()
        end
    end
end

local pickupGolds = createInstantPickup("Raw Gold", false, "pickupGold")
local pickupCoals = createInstantPickup("Coal", false, "pickupCoal")
local pickupCoins = createInstantPickup("Coin", false, "pickupCoins")

-- Optimized Utilities
local function getDeployable(name, range)
    if not CachedItems.Deployables or not Root then return nil end
    
    local closest, closestDist = nil, range or math.huge
    local rootPos = Root.Position
    
    for _, v in ipairs(CachedItems.Deployables:GetChildren()) do
        if v.Name == name and v:IsA("Model") then
            local ok, pivot = pcall(v.GetPivot, v)
            if ok then
                local dist = (rootPos - pivot.Position).Magnitude
                if dist < closestDist then
                    closest, closestDist = v, dist
                end
            end
        end
    end
    return closest
end

local function getQuantity(name)
    for _, v in next, GameUtil.getData().inventory do
        if v.name == name then return v.quantity end
    end
    return 0
end

-- Ultra-Fast Coin Press (Optimized)
local function pressCoins()
    local press, entityID = nil, nil
    while S.coinPress do
        if not press or not press.Parent then
            press = getDeployable("Coin Press", 25)
            entityID = press and press:GetAttribute("EntityID")
            if not entityID then task.wait(0.5) continue end
        end
        
        local goldAmt = getQuantity("Gold")
        if goldAmt > 0 then
            local batchSize = math.min(goldAmt, 25)
            for i = 1, batchSize do
                Packets.InteractStructure.send({ entityID = entityID, itemID = ItemIDS.Gold })
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Optimized Campfire
local function campfireRefuelLoop()
    while S.campfireFuel do
        if CachedItems.Deployables and Root then
            local rootPos = Root.Position
            for _, structure in ipairs(CachedItems.Deployables:GetChildren()) do
                if structure.Name == "Campfire" and (structure:GetPivot().Position - rootPos).Magnitude <= 40 then
                    local entityID = structure:GetAttribute("EntityID")
                    local textLabel = structure:FindFirstChild("Board", true) and structure.Board:FindFirstChild("Billboard", true) and structure.Board.Billboard:FindFirstChild("Backdrop", true) and structure.Board.Billboard.Backdrop:FindFirstChild("TextLabel")
                    
                    if entityID and textLabel then
                        local fireValue = tonumber(textLabel.Text) or 999
                        if fireValue <= 200 then
                            for i = 1, math.min(10, math.floor((250 - fireValue) / 50)) do
                                Packets.InteractStructure.send({ entityID = entityID, itemID = ItemIDS.Coal })
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.25)
    end
end

-- Ultra-Fast TP Gold to Chest (Maximum Speed)
local function tpRawGoldLoop()
    local chestPos = nil
    while S.tpRawGoldToChest do
        if not S.chest or not S.chest.Parent then
            S.chest = getDeployable("Chest", 100)
            if not S.chest then 
                task.wait(0.5) 
                continue 
            end
            chestPos = S.chest:GetPivot()
        end
        
        local inventory = GameUtil.getData().inventory
        for idx, data in pairs(inventory) do
            if data.name == "Raw Gold" and data.quantity > 0 then
                local dropAmount = math.min(data.quantity, 50)
                for i = 1, dropAmount do
                    Packets.DropBagItem.send(idx, 1)
                end
                
                task.wait(0.05)
                
                if CachedItems.Items then
                    for _, item in ipairs(CachedItems.Items:GetChildren()) do
                        if item.Name == "Raw Gold" then
                            local id = item:GetAttribute("EntityID")
                            if id then
                                Packets.ForceInteract.send(id)
                                pcall(item.PivotTo, item, chestPos * CFrame.new(0, 2, 0))
                                Packets.ForceInteract.send()
                            end
                        end
                    end
                end
                break
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Pickup Gold from Chest (Ultra Fast)
local function pickupGoldFromChestLoop()
    while S.pickupGoldFromChest do
        if not S.chest or not S.chest.Parent then
            S.chest = getDeployable("Chest", 100)
            if not S.chest then task.wait(1) continue end
        end
        
        local contents = S.chest:FindFirstChild("Contents")
        if contents then
            for _, item in ipairs(contents:GetChildren()) do
                if item.Name == "Gold" then
                    local id = item:GetAttribute("EntityID")
                    if id then
                        for i = 1, 5 do Packets.Pickup.send(id) end
                    end
                end
            end
        end
        RunService.Heartbeat:Wait()
    end
end

-- Performance Optimization: Black Screen
local blackScreenGui = nil
local originalLightingSettings = {}

local function enableBlackScreen()
    if not blackScreenGui then
        blackScreenGui = Instance.new("ScreenGui")
        blackScreenGui.Name = "BlackScreenOptimizer"
        blackScreenGui.IgnoreGuiInset = true
        blackScreenGui.ResetOnSpawn = false
        
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = Color3.new(0, 0, 0)
        frame.BorderSizePixel = 0
        frame.Parent = blackScreenGui
        
        blackScreenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    originalLightingSettings = {
        Brightness = Lighting.Brightness,
        GlobalShadows = Lighting.GlobalShadows,
        OutdoorAmbient = Lighting.OutdoorAmbient,
        Ambient = Lighting.Ambient,
    }
    
    Lighting.Brightness = 0
    Lighting.GlobalShadows = false
    Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
    Lighting.Ambient = Color3.new(0, 0, 0)
    
    for _, effect in pairs(Lighting:GetChildren()) do
        if effect:IsA("PostEffect") then
            effect.Enabled = false
        end
    end
end

local function disableBlackScreen()
    if blackScreenGui then
        blackScreenGui:Destroy()
        blackScreenGui = nil
    end
    
    if originalLightingSettings.Brightness then
        Lighting.Brightness = originalLightingSettings.Brightness
        Lighting.GlobalShadows = originalLightingSettings.GlobalShadows
        Lighting.OutdoorAmbient = originalLightingSettings.OutdoorAmbient
        Lighting.Ambient = originalLightingSettings.Ambient
    end
    
    for _, effect in pairs(Lighting:GetChildren()) do
        if effect:IsA("PostEffect") then
            effect.Enabled = true
        end
    end
end

-- Tween System with Config Support
local activeTween = nil

local function tweenToPosition(targetPos)
    if not Root or not Root.Parent then return end
    
    -- Convert table to Vector3 if needed
    local targetVector3
    if typeof(targetPos) == "Vector3" then
        targetVector3 = targetPos
    elseif type(targetPos) == "table" and targetPos.X and targetPos.Y and targetPos.Z then
        targetVector3 = Vector3.new(targetPos.X, targetPos.Y, targetPos.Z)
    else
        return
    end
    
    local distance = (targetVector3 - Root.Position).Magnitude
    local duration = distance / S.tweenSpeed
    
    if activeTween then
        activeTween:Cancel()
    end
    
    local tweenInfo = TweenInfo.new(
        duration,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.InOut
    )
    
    activeTween = TweenService:Create(Root, tweenInfo, {CFrame = CFrame.new(targetVector3)})
    activeTween:Play()
    activeTween.Completed:Wait()
end

local function startTweenLoop()
    while S.tween and S.isMoving do
        if #S.positions == 0 then
            task.wait(1)
            continue
        end
        
        local targetPos = S.positions[S.currentTargetIndex]
        if targetPos then
            tweenToPosition(targetPos)
            task.wait(S.waitTime)
            S.currentTargetIndex = (S.currentTargetIndex % #S.positions) + 1
        end
        task.wait()
    end
end

-- Wait for UI to load
repeat task.wait(0.1) until Library

-- GUI Setup
local Window = Library:CreateWindow({
    Title = 'Gold Farm Hub',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Main'),
    Extras = Window:AddTab('Extras'),
    Performance = Window:AddTab('Performance'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Main Tab
local MainBox = Tabs.Main:AddLeftGroupbox('Main')

MainBox:AddButton('Anti-AFK', function()
    setupAntiAFK()
    Library:Notify('Anti-AFK enabled!')
end)

MainBox:AddToggle('AutoHit', {
    Text = 'Auto Hit',
    Default = false,
    Callback = function(v)
        S.autoHit = v
        if v then
            Connections.autoHit = RunService.Heartbeat:Connect(hitResources)
        else
            if Connections.autoHit then Connections.autoHit:Disconnect() end
        end
    end
})

MainBox:AddToggle('Noclip', {
    Text = 'Noclip',
    Default = false,
    Callback = function(v)
        S.noclip = v
        noclip()
        if v then
            Connections.noclip = RunService.Heartbeat:Connect(noclip)
        else
            if Connections.noclip then Connections.noclip:Disconnect() end
            noclip()
        end
    end
})

MainBox:AddDropdown('FruitSelect', {
    Values = fruitOptions,
    Default = 1,
    Multi = false,
    Text = 'Select Fruit',
    Callback = function(v) S.fruit = v end
})

MainBox:AddToggle('AutoEat', {
    Text = 'Auto Eat',
    Default = false,
    Callback = function(v)
        S.autoEat = v
        if v then Tasks.autoEat = task.spawn(autoEat)
        else if Tasks.autoEat then task.cancel(Tasks.autoEat) end end
    end
})

-- Tween Tab
local TweenBox = Tabs.Main:AddRightGroupbox('Tweening')

TweenBox:AddToggle('Tween', {
    Text = 'Enable Tween',
    Default = false,
    Callback = function(v)
        S.tween = v
        S.isMoving = v
        if v then
            task.wait(0.5)
            if config.positions then
                S.positions = config.positions
            end
            Tasks.tween = task.spawn(startTweenLoop)
        else
            if activeTween then activeTween:Cancel() end
            if Tasks.tween then task.cancel(Tasks.tween) end
        end
    end
})

TweenBox:AddSlider('Speed', {
    Text = 'Tween Speed',
    Default = 20,
    Min = 5,
    Max = 50,
    Rounding = 1,
    Compact = false,
    Callback = function(v)
        S.tweenSpeed = v
    end
})

TweenBox:AddSlider('WaitTime', {
    Text = 'Wait Time (s)',
    Default = 0.01,
    Min = 0,
    Max = 5,
    Rounding = 2,
    Compact = false,
    Callback = function(v)
        S.waitTime = v
    end
})

TweenBox:AddLabel('Positions: Loading...')

task.spawn(function()
    task.wait(1)
    if config.positions then
        S.positions = config.positions
        TweenBox:AddLabel('Positions: ' .. #S.positions)
    end
end)

-- Pickup Section (Now on Main Tab)
local PickupBox = Tabs.Main:AddLeftGroupbox('Instant Pickup')

PickupBox:AddToggle('PickupGold', {
    Text = 'Pickup Raw Gold',
    Default = false,
    Callback = function(v)
        S.pickupGold = v
        if v then Tasks.pickupGold = task.spawn(pickupGolds)
        else if Tasks.pickupGold then task.cancel(Tasks.pickupGold) end end
    end
})

PickupBox:AddToggle('PickupCoal', {
    Text = 'Pickup Coal',
    Default = false,
    Callback = function(v)
        S.pickupCoal = v
        if v then Tasks.pickupCoal = task.spawn(pickupCoals)
        else if Tasks.pickupCoal then task.cancel(Tasks.pickupCoal) end end
    end
})

PickupBox:AddToggle('PickupCoins', {
    Text = 'Pickup Coins',
    Default = false,
    Callback = function(v)
        S.pickupCoins = v
        if v then Tasks.pickupCoins = task.spawn(pickupCoins)
        else if Tasks.pickupCoins then task.cancel(Tasks.pickupCoins) end end
    end
})

-- Extras Tab
local ExtrasBox = Tabs.Extras:AddLeftGroupbox('Extras')

ExtrasBox:AddToggle('CoinPress', {
    Text = 'Auto Coin Press (Ultra Fast)',
    Default = false,
    Callback = function(v)
        S.coinPress = v
        if v then Tasks.coinPress = task.spawn(pressCoins)
        else if Tasks.coinPress then task.cancel(Tasks.coinPress) end end
    end
})

ExtrasBox:AddToggle('CampfireFuel', {
    Text = 'Auto Fuel Campfire',
    Default = false,
    Callback = function(v)
        S.campfireFuel = v
        if v then Tasks.campfireFuel = task.spawn(campfireRefuelLoop)
        else if Tasks.campfireFuel then task.cancel(Tasks.campfireFuel) end end
    end
})

ExtrasBox:AddToggle('TPGoldToChest', {
    Text = 'TP Gold to Chest (Ultra Fast)',
    Default = false,
    Callback = function(v)
        S.tpRawGoldToChest = v
        if v then
            S.chest = getDeployable("Chest", 100)
            if not S.chest then
                S.tpRawGoldToChest = false
                Library:Notify('No chest found!')
                return
            end
            Tasks.tpRawGold = task.spawn(tpRawGoldLoop)
        else
            if Tasks.tpRawGold then task.cancel(Tasks.tpRawGold) end
        end
    end
})

ExtrasBox:AddToggle('PickupGoldFromChest', {
    Text = 'Pickup Gold from Chest',
    Default = false,
    Callback = function(v)
        S.pickupGoldFromChest = v
        if v then
            S.chest = getDeployable("Chest", 100)
            if not S.chest then
                S.pickupGoldFromChest = false
                Library:Notify('No chest found!')
                return
            end
            Tasks.pickupGoldFromChest = task.spawn(pickupGoldFromChestLoop)
        else
            if Tasks.pickupGoldFromChest then task.cancel(Tasks.pickupGoldFromChest) end
        end
    end
})

-- Performance Tab
local PerfBox = Tabs.Performance:AddLeftGroupbox('Performance Boost')

PerfBox:AddLabel('Black Screen Mode')

PerfBox:AddToggle('BlackScreen', {
    Text = 'Enable Black Screen',
    Default = false,
    Tooltip = 'Covers screen with black overlay and disables lighting for maximum FPS',
    Callback = function(v)
        S.blackScreen = v
        if v then
            enableBlackScreen()
            Library:Notify('Black Screen Optimization Enabled! FPS Boost Active')
        else
            disableBlackScreen()
            Library:Notify('Black Screen Optimization Disabled')
        end
    end
})

PerfBox:AddDivider()

PerfBox:AddLabel('Benefits:')
PerfBox:AddLabel('• Massive FPS increase')
PerfBox:AddLabel('• Reduced GPU usage')
PerfBox:AddLabel('• Lower CPU overhead')
PerfBox:AddLabel('• Disabled lighting effects')

local PerfBox2 = Tabs.Performance:AddRightGroupbox('Graphics Settings')

PerfBox2:AddButton('Set Graphics to Minimum', function()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    Library:Notify('Graphics set to minimum!')
end)

PerfBox2:AddButton('Disable All Effects', function()
    for _, effect in pairs(Lighting:GetChildren()) do
        if effect:IsA("PostEffect") then
            effect.Enabled = false
        end
    end
    Library:Notify('All visual effects disabled!')
end)

PerfBox2:AddDivider()

PerfBox2:AddLabel('Additional Optimizations:')
PerfBox2:AddLabel('• Lower graphics quality')
PerfBox2:AddLabel('• Disable post-processing')
PerfBox2:AddLabel('• Reduce particle effects')

-- UI Settings
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
ThemeManager:SetFolder('GoldFarmHub')
SaveManager:SetFolder('GoldFarmHub/configs')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])

Library:OnUnload(function()
    Library.Unloaded = true
    if S.blackScreen then
        disableBlackScreen()
    end
    if activeTween then
        activeTween:Cancel()
    end
end)

Library:Notify('Gold Farm Hub loaded!')
print("=== Gold Farm Loaded ===\nPositions: Loading...\nFruit: " .. S.fruit .. "\nTween Speed: " .. S.tweenSpeed .. "\nWait Time: " .. S.waitTime)

task.spawn(function()
    task.wait(2)
    if config.positions then
        S.positions = config.positions
        print("Positions loaded: " .. #S.positions)
    end
end)